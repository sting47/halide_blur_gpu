Injecting realization of f2
Injecting realization of f1
Injecting realization of f0
Injecting realization of clamped
Inlining floating
Injecting tracing...
Injecting profiling...
Adding checks for parameters
Computing bounds of each function's value
Adding checks for images
Performing computation bounds inference...
Performing sliding window optimization...
Performing allocation bounds inference...
Uniquifying variable names...
Performing storage folding optimization...
Injecting debug_to_file calls...
Simplifying...
Dynamically skipping stages...
Performing storage flattening...
Injecting host <-> dev buffer copies...
Injecting per-block gpu synchronization...
Removing code that depends on undef values...
Simplifying...
Unrolling...
Vectorizing...
Detecting vector interleavings...
Specializing clamped ramps...
Injecting early frees...
Injecting device frees...
Simplifying...
Lowering after final simplification:
let input.extent.0.required.s = (max(min(((blur_fusion.min.0 + blur_fusion.extent.0) + 2), (input.extent.0 + -1)), 0) - max(min((blur_fusion.min.0 + -3), (input.extent.0 + -1)), 0))
let input.min.0.required = max(min((blur_fusion.min.0 + -3), (input.extent.0 + -1)), 0)
let input.extent.1.required.s = (max((min((blur_fusion.min.1 + blur_fusion.extent.1), input.extent.1) + -1), 0) - max(min(blur_fusion.min.1, (input.extent.1 + -1)), 0))
let input.min.1.required = max(min(blur_fusion.min.1, (input.extent.1 + -1)), 0)
let input.stride.2.required = ((input.extent.0.required.s + 1)*(input.extent.1.required.s + 1))
if (blur_fusion.host_and_dev_are_null) {
  rewrite_buffer(blur_fusion.buffer, 2, blur_fusion.min.0, blur_fusion.extent.0, 1, blur_fusion.min.1, blur_fusion.extent.1, blur_fusion.extent.0, blur_fusion.min.2, blur_fusion.extent.2, (blur_fusion.extent.0*blur_fusion.extent.1))
}
if (input.host_and_dev_are_null) {
  rewrite_buffer(input.buffer, 2, input.min.0.required, (input.extent.0.required.s + 1), 1, input.min.1.required, (input.extent.1.required.s + 1), (input.extent.0.required.s + 1), blur_fusion.min.2, blur_fusion.extent.2, input.stride.2.required)
}
if (!(blur_fusion.host_and_dev_are_null || input.host_and_dev_are_null)) {
  assert((blur_fusion.elem_size == 2), stringify("Output buffer blur_fusion has type uint16, but elem_size of the buffer_t passed in is ", blur_fusion.elem_size, " instead of 2"))
  assert((input.elem_size == 2), stringify("Input buffer input has type uint16, but elem_size of the buffer_t passed in is ", input.elem_size, " instead of 2"))
  assert((input.min.0 <= input.min.0.required), stringify("Input buffer input is accessed at ", max(min((blur_fusion.min.0 + -3), (input.extent.0 + -1)), 0), ", which is before the min (", input.min.0, ") in dimension 0"))
  assert(((((input.min.0.required + input.extent.0.required.s) - input.extent.0) + 1) <= input.min.0), stringify("Input buffer input is accessed at ", (input.min.0.required + input.extent.0.required.s), ", which is beyond the max (", ((input.min.0 + input.extent.0) + -1), ") in dimension 0"))
  assert((input.min.1 <= input.min.1.required), stringify("Input buffer input is accessed at ", max(min(blur_fusion.min.1, (input.extent.1 + -1)), 0), ", which is before the min (", input.min.1, ") in dimension 1"))
  assert(((((input.min.1.required + input.extent.1.required.s) - input.extent.1) + 1) <= input.min.1), stringify("Input buffer input is accessed at ", (input.min.1.required + input.extent.1.required.s), ", which is beyond the max (", ((input.min.1 + input.extent.1) + -1), ") in dimension 1"))
  assert((input.min.2 <= blur_fusion.min.2), stringify("Input buffer input is accessed at ", blur_fusion.min.2, ", which is before the min (", input.min.2, ") in dimension 2"))
  assert((((blur_fusion.min.2 + blur_fusion.extent.2) - input.extent.2) <= input.min.2), stringify("Input buffer input is accessed at ", ((blur_fusion.min.2 + blur_fusion.extent.2) + -1), ", which is beyond the max (", ((input.min.2 + input.extent.2) + -1), ") in dimension 2"))
  assert((blur_fusion.stride.0 == 1), "Static constraint violated: blur_fusion.stride.0 == 1")
  assert((input.stride.0 == 1), "Static constraint violated: input.stride.0 == 1")
  let blur_fusion.total_extent.1 = (int64(blur_fusion.extent.1)*int64(blur_fusion.extent.0))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  assert((int64(blur_fusion.extent.0) <= int64(2147483647)), "Total allocation for buffer blur_fusion exceeds 2^31 - 1")
  assert(((int64(blur_fusion.extent.1)*int64(blur_fusion.stride.1)) <= int64(2147483647)), "Total allocation for buffer blur_fusion exceeds 2^31 - 1")
  assert((blur_fusion.total_extent.1 <= int64(2147483647)), "Product of extents for buffer blur_fusion exceeds 2^31 - 1")
  assert(((int64(blur_fusion.extent.2)*int64(blur_fusion.stride.2)) <= int64(2147483647)), "Total allocation for buffer blur_fusion exceeds 2^31 - 1")
  assert(((int64(blur_fusion.extent.2)*blur_fusion.total_extent.1) <= int64(2147483647)), "Product of extents for buffer blur_fusion exceeds 2^31 - 1")
  assert((int64(input.extent.0) <= int64(2147483647)), "Total allocation for buffer input exceeds 2^31 - 1")
  assert(((int64(input.extent.1)*int64(input.stride.1)) <= int64(2147483647)), "Total allocation for buffer input exceeds 2^31 - 1")
  assert((input.total_extent.1 <= int64(2147483647)), "Product of extents for buffer input exceeds 2^31 - 1")
  assert(((int64(input.extent.2)*int64(input.stride.2)) <= int64(2147483647)), "Total allocation for buffer input exceeds 2^31 - 1")
  assert(((int64(input.extent.2)*input.total_extent.1) <= int64(2147483647)), "Product of extents for buffer input exceeds 2^31 - 1")
  let clamped.y.min_realized = min(blur_fusion.min.1, ((blur_fusion.min.1 + blur_fusion.extent.1) + -2))
  let clamped.y.extent_realized.s.s = max(((blur_fusion.min.1 + blur_fusion.extent.1) + -1), min((((((blur_fusion.extent.1 + -1)/2)*2) + blur_fusion.min.1) + 1), ((blur_fusion.min.1 + blur_fusion.extent.1) + -1)))
  let clamped.x.min_realized = (let t10 = min(blur_fusion.min.0, ((blur_fusion.min.0 + blur_fusion.extent.0) + -2)) in (let t11 = min((min((t10 + -1), min((blur_fusion.min.0 + 1), ((blur_fusion.min.0 + blur_fusion.extent.0) + -1))) + -1), min(t10, (min(blur_fusion.extent.0, 2) + blur_fusion.min.0))) in min(min(min((blur_fusion.min.0 + -3), (t11 + -1)), t11), (t11 + 1))))
  let clamped.x.extent_realized.s.s = (let t14 = max(max(min(((((blur_fusion.extent.0 + -1)/2)*2) + blur_fusion.min.0), ((blur_fusion.min.0 + blur_fusion.extent.0) + -2)), min((((((blur_fusion.extent.0 + -1)/2)*2) + blur_fusion.min.0) + 1), ((blur_fusion.min.0 + blur_fusion.extent.0) + -1))), min((((((blur_fusion.extent.0 + -1)/2)*2) + blur_fusion.min.0) + 2), (blur_fusion.min.0 + blur_fusion.extent.0))) in max(max(max(((blur_fusion.min.0 + blur_fusion.extent.0) + 2), t14), (t14 + 1)), (t14 + 2)))
  let clamped.stride.2 = (((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1)*((clamped.y.extent_realized.s.s - clamped.y.min_realized) + 1))
  allocate clamped[float32 * ((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1) * ((clamped.y.extent_realized.s.s - clamped.y.min_realized) + 1) * blur_fusion.extent.2]
  let clamped.buffer = create_buffer_t(address_of(clamped[0]), 4, clamped.x.min_realized, ((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1), 1, clamped.y.min_realized, ((clamped.y.extent_realized.s.s - clamped.y.min_realized) + 1), ((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1), blur_fusion.min.2, blur_fusion.extent.2, clamped.stride.2)
  assert((halide_dev_malloc(clamped.buffer) == 0), "Failed to allocate device buffer for clamped")
  produce clamped {
    assert((halide_copy_to_host(input.buffer) == 0), "Failed to copy buffer input to host.")
    for (clamped.s0.c, blur_fusion.min.2, blur_fusion.extent.2) {
      for (clamped.s0.y, blur_fusion.min.1, blur_fusion.extent.1) {
        for (clamped.s0.x, (blur_fusion.min.0 + -3), (blur_fusion.extent.0 + 6)) {
          clamped[(((clamped.s0.x - clamped.x.min_realized) + ((clamped.s0.y - clamped.y.min_realized)*((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1))) + ((clamped.s0.c - blur_fusion.min.2)*clamped.stride.2))] = (float32(input[(((max(min(clamped.s0.x, (input.extent.0 + -1)), 0) + (max(min(clamped.s0.y, (input.extent.1 + -1)), 0)*input.stride.1)) + (clamped.s0.c*input.stride.2)) - ((input.min.0 + (input.min.1*input.stride.1)) + (input.min.2*input.stride.2)))])*0.000015f)
        }
      }
    }
    set_host_dirty(clamped.buffer, uint8(1))
  }
  let f2.y.extent_realized = max(blur_fusion.extent.1, 2)
  let f2.x.min_realized = min(blur_fusion.min.0, ((blur_fusion.min.0 + blur_fusion.extent.0) + -2))
  let f2.x.extent_realized = max(blur_fusion.extent.0, 2)
  allocate f2[float32 * f2.x.extent_realized * f2.y.extent_realized * blur_fusion.extent.2]
  let f2.buffer = create_buffer_t(address_of(f2[0]), 4, f2.x.min_realized, f2.x.extent_realized, 1, clamped.y.min_realized, f2.y.extent_realized, f2.x.extent_realized, blur_fusion.min.2, blur_fusion.extent.2, (f2.x.extent_realized*f2.y.extent_realized))
  assert((halide_dev_malloc(f2.buffer) == 0), "Failed to allocate device buffer for f2")
  produce f2 {
    assert((halide_copy_to_dev(clamped.buffer) == 0), "Failed to copy buffer clamped to dev.")
    for (f2.s0.c, blur_fusion.min.2, blur_fusion.extent.2) {
      parallel (f2.s0.y.y.__block_id_y, 0, ((blur_fusion.extent.1 + 1)/2)) {
        let f2.s0.s1.base = min(((f2.s0.y.y.__block_id_y*2) + blur_fusion.min.1), ((blur_fusion.min.1 + blur_fusion.extent.1) + -2))
        parallel (f2.s0.x.x.__block_id_x, 0, ((blur_fusion.extent.0 + 1)/2)) {
          allocate __shared[uint8 * 80]
          parallel (.__thread_id_y, 0, 2) {
            parallel (.__thread_id_x, 0, 2) {
              let f2.s0.s0.base = min(((f2.s0.x.x.__block_id_x*2) + blur_fusion.min.0), ((blur_fusion.min.0 + blur_fusion.extent.0) + -2))
              produce f0 {
                if ((.__thread_id_y < 1)) {
                  if ((.__thread_id_x < 1)) {
                    for (f0.s0.y, f2.s0.s1.base, 2) {
                      for (f0.s0.x, (f2.s0.s0.base + -2), 6) {
                        __shared[(((f0.s0.x - f2.s0.s0.base) + ((f0.s0.y - f2.s0.s1.base)*6)) + 10)] = (let t16 = (((f0.s0.x - clamped.x.min_realized) + ((f0.s0.y - clamped.y.min_realized)*((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1))) + ((f2.s0.c - blur_fusion.min.2)*clamped.stride.2)) in (((clamped[(t16 + -1)] + clamped[t16]) + clamped[(t16 + 1)])*0.333333f))
                      }
                    }
                  }
                }
                halide_gpu_thread_barrier()
              }
              produce f1 {
                if ((.__thread_id_y < 1)) {
                  if ((.__thread_id_x < 1)) {
                    for (f1.s0.y, f2.s0.s1.base, 2) {
                      for (f1.s0.x, (f2.s0.s0.base + -1), 4) {
                        __shared[(((f1.s0.x - f2.s0.s0.base) + ((f1.s0.y - f2.s0.s1.base)*4)) + 1)] = (let t17 = ((f1.s0.x - f2.s0.s0.base) + ((f1.s0.y - f2.s0.s1.base)*6)) in (((__shared[(t17 + 9)] + __shared[(t17 + 10)]) + __shared[(t17 + 11)])*0.333333f))
                      }
                    }
                  }
                }
                halide_gpu_thread_barrier()
              }
              f2[((((f2.s0.s0.base + .__thread_id_x) - f2.x.min_realized) + (((f2.s0.s1.base + .__thread_id_y) - clamped.y.min_realized)*f2.x.extent_realized)) + ((f2.s0.c - blur_fusion.min.2)*(f2.x.extent_realized*f2.y.extent_realized)))] = (let t18 = (.__thread_id_x + (.__thread_id_y*4)) in (((__shared[t18] + __shared[(t18 + 1)]) + __shared[(t18 + 2)])*0.333333f))
            }
          }
          free __shared
        }
      }
    }
    assert((halide_dev_free(clamped.buffer) == 0), "Failed to free device buffer for clamped")
    free clamped
    set_dev_dirty(f2.buffer, uint8(1))
  }
  produce blur_fusion {
    assert((halide_copy_to_host(f2.buffer) == 0), "Failed to copy buffer f2 to host.")
    assert((halide_copy_to_host(blur_fusion.buffer) == 0), "Failed to copy buffer blur_fusion to host.")
    for (blur_fusion.s0.c, blur_fusion.min.2, blur_fusion.extent.2) {
      for (blur_fusion.s0.y, blur_fusion.min.1, blur_fusion.extent.1) {
        for (blur_fusion.s0.x, blur_fusion.min.0, blur_fusion.extent.0) {
          blur_fusion[(((blur_fusion.s0.x + (blur_fusion.s0.y*blur_fusion.stride.1)) + (blur_fusion.s0.c*blur_fusion.stride.2)) - ((blur_fusion.min.0 + (blur_fusion.min.1*blur_fusion.stride.1)) + (blur_fusion.min.2*blur_fusion.stride.2)))] = uint16((max(min(f2[(((blur_fusion.s0.x - f2.x.min_realized) + ((blur_fusion.s0.y - clamped.y.min_realized)*f2.x.extent_realized)) + ((blur_fusion.s0.c - blur_fusion.min.2)*(f2.x.extent_realized*f2.y.extent_realized)))], 1.000000f), 0.000000f)*65535.000000f))
        }
      }
    }
    assert((halide_dev_free(f2.buffer) == 0), "Failed to free device buffer for f2")
    free f2
    set_host_dirty(blur_fusion.buffer, uint8(1))
  }
  0
}


Constructing OpenCL device codegen
Target triple of initial module: x86_64-unknown-unknown-unknown
Target triple of initial module: x86_64--linux-gnu
Generating llvm bitcode...
OpenCL kernel:
/*OpenCL C*/
#pragma OPENCL FP_CONTRACT ON
float maxval_f32() {return FLT_MAX;}
float minval_f32() {return -FLT_MAX;}
float nan_f32() { return NAN; }
float neg_inf_f32() { return -INFINITY; }
bool is_nan_f32(float x) {return x != x; }
float inf_f32() { return INFINITY; }
float float_from_bits(unsigned int x) {return as_float(x);}
char smod_char(char a, char b) {
char r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

short smod_short(short a, short b) {
short r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

int smod_int(int a, int b) {
int r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

long smod_long(long a, long b) {
long r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

char sdiv_char(char a, char b) {
char q = a / b;
char r = a - q*b;
char bs = b >> (8*sizeof(char) - 1);
char rs = r >> (8*sizeof(char) - 1);
return q - (rs&bs) + (rs&~bs);
}

short sdiv_short(short a, short b) {
short q = a / b;
short r = a - q*b;
short bs = b >> (8*sizeof(short) - 1);
short rs = r >> (8*sizeof(short) - 1);
return q - (rs&bs) + (rs&~bs);
}

int sdiv_int(int a, int b) {
int q = a / b;
int r = a - q*b;
int bs = b >> (8*sizeof(int) - 1);
int rs = r >> (8*sizeof(int) - 1);
return q - (rs&bs) + (rs&~bs);
}

long sdiv_long(long a, long b) {
long q = a / b;
long r = a - q*b;
long bs = b >> (8*sizeof(long) - 1);
long rs = r >> (8*sizeof(long) - 1);
return q - (rs&bs) + (rs&~bs);
}

#define sqrt_f32 sqrt 
#define sin_f32 sin 
#define cos_f32 cos 
#define exp_f32 exp 
#define log_f32 log 
#define abs_f32 fabs 
#define floor_f32 floor 
#define ceil_f32 ceil 
#define round_f32 round 
#define trunc_f32 trunc 
#define pow_f32 pow
#define asin_f32 asin 
#define acos_f32 acos 
#define tan_f32 tan 
#define atan_f32 atan 
#define atan2_f32 atan2
#define sinh_f32 sinh 
#define asinh_f32 asinh 
#define cosh_f32 cosh 
#define acosh_f32 acosh 
#define tanh_f32 tanh 
#define atanh_f32 atanh 
#define fast_inverse_f32 native_recip 
#define fast_inverse_sqrt_f32 native_rsqrt 
int halide_gpu_thread_barrier() {
  barrier(CLK_LOCAL_MEM_FENCE);
  return 0;
}
#define __address_space___shared __local

__kernel void _at_least_one_kernel(int x) { }
// Address spaces for kernel_f2_s0_y_y___block_id_y
#define __address_space__clamped __global
#define __address_space__f2 __global
__kernel void kernel_f2_s0_y_y___block_id_y(
 const int _blur_fusion_extent_0,
 const int _blur_fusion_extent_1,
 const int _blur_fusion_min_0,
 const int _blur_fusion_min_1,
 const int _blur_fusion_min_2,
 const int _clamped_stride_2,
 const int _clamped_x_extent_realized_s_s,
 const int _clamped_x_min_realized,
 const int _clamped_y_min_realized,
 const int _f2_s0_c,
 const int _f2_x_extent_realized,
 const int _f2_x_min_realized,
 const int _f2_y_extent_realized,
 __address_space__clamped float *_clamped,
 __address_space__f2 float *_f2,
 __address_space___shared int16* __shared)
{
 int _f2_s0_y_y___block_id_y = get_group_id(1);
 int _0 = _f2_s0_y_y___block_id_y * 2;
 int _1 = _0 + _blur_fusion_min_1;
 int _2 = _blur_fusion_min_1 + _blur_fusion_extent_1;
 int _3 = _2 + -2;
 int _4 = min(_1, _3);
 int _f2_s0_x_x___block_id_x = get_group_id(0);
 int ___thread_id_y = get_local_id(1);
 int ___thread_id_x = get_local_id(0);
 int _5 = _f2_s0_x_x___block_id_x * 2;
 int _6 = _5 + _blur_fusion_min_0;
 int _7 = _blur_fusion_min_0 + _blur_fusion_extent_0;
 int _8 = _7 + -2;
 int _9 = min(_6, _8);
 // produce f0
 bool _10 = ___thread_id_y < 1;
 if (_10)
 {
  bool _11 = ___thread_id_x < 1;
  if (_11)
  {
   for (int _f0_s0_y = _4; _f0_s0_y < _4 + 2; _f0_s0_y++)
   {
    int _12 = _9 + -2;
    for (int _f0_s0_x = _12; _f0_s0_x < _12 + 6; _f0_s0_x++)
    {
     int _13 = _f0_s0_x - _clamped_x_min_realized;
     int _14 = _f0_s0_y - _clamped_y_min_realized;
     int _15 = _clamped_x_extent_realized_s_s - _clamped_x_min_realized;
     int _16 = _15 + 1;
     int _17 = _14 * _16;
     int _18 = _13 + _17;
     int _19 = _f2_s0_c - _blur_fusion_min_2;
     int _20 = _19 * _clamped_stride_2;
     int _21 = _18 + _20;
     int _22 = _21 + -1;
     float _23 = _clamped[_22];
     float _24 = _clamped[_21];
     float _25 = _23 + _24;
     int _26 = _21 + 1;
     float _27 = _clamped[_26];
     float _28 = _25 + _27;
     float _29 = _28 * float_from_bits(1051372203 /* 0.333333 */);
     int _30 = _f0_s0_x - _9;
     int _31 = _f0_s0_y - _4;
     int _32 = _31 * 6;
     int _33 = _30 + _32;
     int _34 = _33 + 10;
     ((__address_space___shared float *)__shared)[_34] = _29;
    } // for _f0_s0_x
   } // for _f0_s0_y
  } // if _11
 } // if _10
 int _35 = halide_gpu_thread_barrier();
 (void)_35;
 // consume f0
 // produce f1
 bool _36 = ___thread_id_y < 1;
 if (_36)
 {
  bool _37 = ___thread_id_x < 1;
  if (_37)
  {
   for (int _f1_s0_y = _4; _f1_s0_y < _4 + 2; _f1_s0_y++)
   {
    int _38 = _9 + -1;
    for (int _f1_s0_x = _38; _f1_s0_x < _38 + 4; _f1_s0_x++)
    {
     int _39 = _f1_s0_x - _9;
     int _40 = _f1_s0_y - _4;
     int _41 = _40 * 6;
     int _42 = _39 + _41;
     int _43 = _42 + 9;
     float _44 = ((__address_space___shared float *)__shared)[_43];
     int _45 = _42 + 10;
     float _46 = ((__address_space___shared float *)__shared)[_45];
     float _47 = _44 + _46;
     int _48 = _42 + 11;
     float _49 = ((__address_space___shared float *)__shared)[_48];
     float _50 = _47 + _49;
     float _51 = _50 * float_from_bits(1051372203 /* 0.333333 */);
     int _52 = _40 * 4;
     int _53 = _39 + _52;
     int _54 = _53 + 1;
     ((__address_space___shared float *)__shared)[_54] = _51;
    } // for _f1_s0_x
   } // for _f1_s0_y
  } // if _37
 } // if _36
 int _55 = halide_gpu_thread_barrier();
 (void)_55;
 // consume f1
 int _56 = ___thread_id_y * 4;
 int _57 = ___thread_id_x + _56;
 float _58 = ((__address_space___shared float *)__shared)[_57];
 int _59 = _57 + 1;
 float _60 = ((__address_space___shared float *)__shared)[_59];
 float _61 = _58 + _60;
 int _62 = _57 + 2;
 float _63 = ((__address_space___shared float *)__shared)[_62];
 float _64 = _61 + _63;
 float _65 = _64 * float_from_bits(1051372203 /* 0.333333 */);
 int _66 = _9 + ___thread_id_x;
 int _67 = _66 - _f2_x_min_realized;
 int _68 = _4 + ___thread_id_y;
 int _69 = _68 - _clamped_y_min_realized;
 int _70 = _69 * _f2_x_extent_realized;
 int _71 = _67 + _70;
 int _72 = _f2_s0_c - _blur_fusion_min_2;
 int _73 = _f2_x_extent_realized * _f2_y_extent_realized;
 int _74 = _72 * _73;
 int _75 = _71 + _74;
 _f2[_75] = _65;
} // kernel kernel_f2_s0_y_y___block_id_y
#undef __address_space__clamped
#undef __address_space__f2

Compiling to native code...
'+fma +f16c' is not a recognized feature for this target (ignoring feature)
'+fma +f16c' is not a recognized feature for this target (ignoring feature)
