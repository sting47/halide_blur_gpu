Injecting realization of f2
Injecting realization of f1
Injecting realization of f0
Injecting realization of clamped
Inlining floating
Injecting tracing...
Injecting profiling...
Adding checks for parameters
Computing bounds of each function's value
Adding checks for images
Performing computation bounds inference...
Performing sliding window optimization...
Performing allocation bounds inference...
Uniquifying variable names...
Performing storage folding optimization...
Injecting debug_to_file calls...
Simplifying...
Dynamically skipping stages...
Performing storage flattening...
Injecting host <-> dev buffer copies...
Injecting per-block gpu synchronization...
Removing code that depends on undef values...
Simplifying...
Unrolling...
Vectorizing...
Detecting vector interleavings...
Specializing clamped ramps...
Injecting early frees...
Injecting device frees...
Simplifying...
Lowering after final simplification:
let input.extent.0.required.s = (max(min(((blur_fusion.min.0 + blur_fusion.extent.0) + 2), (input.extent.0 + -1)), 0) - max(min((blur_fusion.min.0 + -3), (input.extent.0 + -1)), 0))
let input.min.0.required = max(min((blur_fusion.min.0 + -3), (input.extent.0 + -1)), 0)
let input.extent.1.required.s = (max((min((blur_fusion.min.1 + blur_fusion.extent.1), input.extent.1) + -1), 0) - max(min(blur_fusion.min.1, (input.extent.1 + -1)), 0))
let input.min.1.required = max(min(blur_fusion.min.1, (input.extent.1 + -1)), 0)
let input.stride.2.required = ((input.extent.0.required.s + 1)*(input.extent.1.required.s + 1))
if (blur_fusion.host_and_dev_are_null) {
  rewrite_buffer(blur_fusion.buffer, 2, blur_fusion.min.0, blur_fusion.extent.0, 1, blur_fusion.min.1, blur_fusion.extent.1, blur_fusion.extent.0, blur_fusion.min.2, blur_fusion.extent.2, (blur_fusion.extent.0*blur_fusion.extent.1))
}
if (input.host_and_dev_are_null) {
  rewrite_buffer(input.buffer, 2, input.min.0.required, (input.extent.0.required.s + 1), 1, input.min.1.required, (input.extent.1.required.s + 1), (input.extent.0.required.s + 1), blur_fusion.min.2, blur_fusion.extent.2, input.stride.2.required)
}
if (!(blur_fusion.host_and_dev_are_null || input.host_and_dev_are_null)) {
  assert((blur_fusion.elem_size == 2), stringify("Output buffer blur_fusion has type uint16, but elem_size of the buffer_t passed in is ", blur_fusion.elem_size, " instead of 2"))
  assert((input.elem_size == 2), stringify("Input buffer input has type uint16, but elem_size of the buffer_t passed in is ", input.elem_size, " instead of 2"))
  assert((input.min.0 <= input.min.0.required), stringify("Input buffer input is accessed at ", max(min((blur_fusion.min.0 + -3), (input.extent.0 + -1)), 0), ", which is before the min (", input.min.0, ") in dimension 0"))
  assert(((((input.min.0.required + input.extent.0.required.s) - input.extent.0) + 1) <= input.min.0), stringify("Input buffer input is accessed at ", (input.min.0.required + input.extent.0.required.s), ", which is beyond the max (", ((input.min.0 + input.extent.0) + -1), ") in dimension 0"))
  assert((input.min.1 <= input.min.1.required), stringify("Input buffer input is accessed at ", max(min(blur_fusion.min.1, (input.extent.1 + -1)), 0), ", which is before the min (", input.min.1, ") in dimension 1"))
  assert(((((input.min.1.required + input.extent.1.required.s) - input.extent.1) + 1) <= input.min.1), stringify("Input buffer input is accessed at ", (input.min.1.required + input.extent.1.required.s), ", which is beyond the max (", ((input.min.1 + input.extent.1) + -1), ") in dimension 1"))
  assert((input.min.2 <= blur_fusion.min.2), stringify("Input buffer input is accessed at ", blur_fusion.min.2, ", which is before the min (", input.min.2, ") in dimension 2"))
  assert((((blur_fusion.min.2 + blur_fusion.extent.2) - input.extent.2) <= input.min.2), stringify("Input buffer input is accessed at ", ((blur_fusion.min.2 + blur_fusion.extent.2) + -1), ", which is beyond the max (", ((input.min.2 + input.extent.2) + -1), ") in dimension 2"))
  assert((blur_fusion.stride.0 == 1), "Static constraint violated: blur_fusion.stride.0 == 1")
  assert((input.stride.0 == 1), "Static constraint violated: input.stride.0 == 1")
  let blur_fusion.total_extent.1 = (int64(blur_fusion.extent.1)*int64(blur_fusion.extent.0))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  assert((int64(blur_fusion.extent.0) <= int64(2147483647)), "Total allocation for buffer blur_fusion exceeds 2^31 - 1")
  assert(((int64(blur_fusion.extent.1)*int64(blur_fusion.stride.1)) <= int64(2147483647)), "Total allocation for buffer blur_fusion exceeds 2^31 - 1")
  assert((blur_fusion.total_extent.1 <= int64(2147483647)), "Product of extents for buffer blur_fusion exceeds 2^31 - 1")
  assert(((int64(blur_fusion.extent.2)*int64(blur_fusion.stride.2)) <= int64(2147483647)), "Total allocation for buffer blur_fusion exceeds 2^31 - 1")
  assert(((int64(blur_fusion.extent.2)*blur_fusion.total_extent.1) <= int64(2147483647)), "Product of extents for buffer blur_fusion exceeds 2^31 - 1")
  assert((int64(input.extent.0) <= int64(2147483647)), "Total allocation for buffer input exceeds 2^31 - 1")
  assert(((int64(input.extent.1)*int64(input.stride.1)) <= int64(2147483647)), "Total allocation for buffer input exceeds 2^31 - 1")
  assert((input.total_extent.1 <= int64(2147483647)), "Product of extents for buffer input exceeds 2^31 - 1")
  assert(((int64(input.extent.2)*int64(input.stride.2)) <= int64(2147483647)), "Total allocation for buffer input exceeds 2^31 - 1")
  assert(((int64(input.extent.2)*input.total_extent.1) <= int64(2147483647)), "Product of extents for buffer input exceeds 2^31 - 1")
  let clamped.y.min_realized = min(blur_fusion.min.1, ((blur_fusion.min.1 + blur_fusion.extent.1) + -2))
  let clamped.y.extent_realized.s.s = max(((blur_fusion.min.1 + blur_fusion.extent.1) + -1), min((((((blur_fusion.extent.1 + -1)/2)*2) + blur_fusion.min.1) + 1), ((blur_fusion.min.1 + blur_fusion.extent.1) + -1)))
  let clamped.x.min_realized = (let t10 = min(blur_fusion.min.0, ((blur_fusion.min.0 + blur_fusion.extent.0) + -2)) in (let t11 = min((min((t10 + -1), min((blur_fusion.min.0 + 1), ((blur_fusion.min.0 + blur_fusion.extent.0) + -1))) + -1), min(t10, (min(blur_fusion.extent.0, 2) + blur_fusion.min.0))) in min(min(min((blur_fusion.min.0 + -3), (t11 + -1)), t11), (t11 + 1))))
  let clamped.x.extent_realized.s.s = (let t14 = max(max(min(((((blur_fusion.extent.0 + -1)/2)*2) + blur_fusion.min.0), ((blur_fusion.min.0 + blur_fusion.extent.0) + -2)), min((((((blur_fusion.extent.0 + -1)/2)*2) + blur_fusion.min.0) + 1), ((blur_fusion.min.0 + blur_fusion.extent.0) + -1))), min((((((blur_fusion.extent.0 + -1)/2)*2) + blur_fusion.min.0) + 2), (blur_fusion.min.0 + blur_fusion.extent.0))) in max(max(max(((blur_fusion.min.0 + blur_fusion.extent.0) + 2), t14), (t14 + 1)), (t14 + 2)))
  let clamped.stride.2 = (((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1)*((clamped.y.extent_realized.s.s - clamped.y.min_realized) + 1))
  allocate clamped[float32 * ((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1) * ((clamped.y.extent_realized.s.s - clamped.y.min_realized) + 1) * blur_fusion.extent.2]
  let clamped.buffer = create_buffer_t(address_of(clamped[0]), 4, clamped.x.min_realized, ((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1), 1, clamped.y.min_realized, ((clamped.y.extent_realized.s.s - clamped.y.min_realized) + 1), ((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1), blur_fusion.min.2, blur_fusion.extent.2, clamped.stride.2)
  assert((halide_dev_malloc(clamped.buffer) == 0), "Failed to allocate device buffer for clamped")
  produce clamped {
    assert((halide_copy_to_host(input.buffer) == 0), "Failed to copy buffer input to host.")
    for (clamped.s0.c, blur_fusion.min.2, blur_fusion.extent.2) {
      for (clamped.s0.y, blur_fusion.min.1, blur_fusion.extent.1) {
        for (clamped.s0.x, (blur_fusion.min.0 + -3), (blur_fusion.extent.0 + 6)) {
          clamped[(((clamped.s0.x - clamped.x.min_realized) + ((clamped.s0.y - clamped.y.min_realized)*((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1))) + ((clamped.s0.c - blur_fusion.min.2)*clamped.stride.2))] = (float32(input[(((max(min(clamped.s0.x, (input.extent.0 + -1)), 0) + (max(min(clamped.s0.y, (input.extent.1 + -1)), 0)*input.stride.1)) + (clamped.s0.c*input.stride.2)) - ((input.min.0 + (input.min.1*input.stride.1)) + (input.min.2*input.stride.2)))])*0.000015f)
        }
      }
    }
    set_host_dirty(clamped.buffer, uint8(1))
  }
  let f2.y.extent_realized = max(blur_fusion.extent.1, 2)
  let f2.x.min_realized = min(blur_fusion.min.0, ((blur_fusion.min.0 + blur_fusion.extent.0) + -2))
  let f2.x.extent_realized = max(blur_fusion.extent.0, 2)
  allocate f2[float32 * f2.x.extent_realized * f2.y.extent_realized * blur_fusion.extent.2]
  let f2.buffer = create_buffer_t(address_of(f2[0]), 4, f2.x.min_realized, f2.x.extent_realized, 1, clamped.y.min_realized, f2.y.extent_realized, f2.x.extent_realized, blur_fusion.min.2, blur_fusion.extent.2, (f2.x.extent_realized*f2.y.extent_realized))
  assert((halide_dev_malloc(f2.buffer) == 0), "Failed to allocate device buffer for f2")
  produce f2 {
    assert((halide_copy_to_dev(clamped.buffer) == 0), "Failed to copy buffer clamped to dev.")
    for (f2.s0.c, blur_fusion.min.2, blur_fusion.extent.2) {
      parallel (f2.s0.y.y.__block_id_y, 0, ((blur_fusion.extent.1 + 1)/2)) {
        let f2.s0.s1.base = min(((f2.s0.y.y.__block_id_y*2) + blur_fusion.min.1), ((blur_fusion.min.1 + blur_fusion.extent.1) + -2))
        parallel (f2.s0.x.x.__block_id_x, 0, ((blur_fusion.extent.0 + 1)/2)) {
          allocate __shared[uint8 * 0]
          parallel (.__thread_id_y, 0, 1) {
            parallel (.__thread_id_x, 0, 1) {
              let f2.s0.s0.base = min(((f2.s0.x.x.__block_id_x*2) + blur_fusion.min.0), ((blur_fusion.min.0 + blur_fusion.extent.0) + -2))
              let f2.s0.y.min_1 = (f2.s0.s1.base + (.__thread_id_y*2))
              let f2.s0.x.min_1 = (f2.s0.s0.base + (.__thread_id_x*2))
              allocate f0[float32 * 6 * 2 * 1]
              produce f0 {
                for (f0.s0.y, f2.s0.y.min_1, 2) {
                  for (f0.s0.x, (f2.s0.x.min_1 + -2), 6) {
                    f0[(((f0.s0.x - f2.s0.x.min_1) + ((f0.s0.y - f2.s0.y.min_1)*6)) + 2)] = (let t16 = (((f0.s0.x - clamped.x.min_realized) + ((f0.s0.y - clamped.y.min_realized)*((clamped.x.extent_realized.s.s - clamped.x.min_realized) + 1))) + ((f2.s0.c - blur_fusion.min.2)*clamped.stride.2)) in (((clamped[(t16 + -1)] + clamped[t16]) + clamped[(t16 + 1)])*0.333333f))
                  }
                }
              }
              allocate f1[float32 * 4 * 2 * 1]
              produce f1 {
                for (f1.s0.y, f2.s0.y.min_1, 2) {
                  for (f1.s0.x, (f2.s0.x.min_1 + -1), 4) {
                    f1[(((f1.s0.x - f2.s0.x.min_1) + ((f1.s0.y - f2.s0.y.min_1)*4)) + 1)] = (let t17 = ((f1.s0.x - f2.s0.x.min_1) + ((f1.s0.y - f2.s0.y.min_1)*6)) in (((f0[(t17 + 1)] + f0[(t17 + 2)]) + f0[(t17 + 3)])*0.333333f))
                  }
                }
                free f0
              }
              for (f2.s0.y.yi, 0, 2) {
                for (f2.s0.x.xi, 0, 2) {
                  f2[((((f2.s0.s0.base + ((.__thread_id_x*2) + f2.s0.x.xi)) - f2.x.min_realized) + (((f2.s0.s1.base + ((.__thread_id_y*2) + f2.s0.y.yi)) - clamped.y.min_realized)*f2.x.extent_realized)) + ((f2.s0.c - blur_fusion.min.2)*(f2.x.extent_realized*f2.y.extent_realized)))] = (let t18 = (((f2.s0.s0.base + ((.__thread_id_x*2) + f2.s0.x.xi)) - f2.s0.x.min_1) + (((f2.s0.s1.base + ((.__thread_id_y*2) + f2.s0.y.yi)) - f2.s0.y.min_1)*4)) in (((f1[t18] + f1[(t18 + 1)]) + f1[(t18 + 2)])*0.333333f))
                }
              }
              free f1
            }
          }
          free __shared
        }
      }
    }
    assert((halide_dev_free(clamped.buffer) == 0), "Failed to free device buffer for clamped")
    free clamped
    set_dev_dirty(f2.buffer, uint8(1))
  }
  produce blur_fusion {
    assert((halide_copy_to_host(f2.buffer) == 0), "Failed to copy buffer f2 to host.")
    assert((halide_copy_to_host(blur_fusion.buffer) == 0), "Failed to copy buffer blur_fusion to host.")
    for (blur_fusion.s0.c, blur_fusion.min.2, blur_fusion.extent.2) {
      for (blur_fusion.s0.y, blur_fusion.min.1, blur_fusion.extent.1) {
        for (blur_fusion.s0.x, blur_fusion.min.0, blur_fusion.extent.0) {
          blur_fusion[(((blur_fusion.s0.x + (blur_fusion.s0.y*blur_fusion.stride.1)) + (blur_fusion.s0.c*blur_fusion.stride.2)) - ((blur_fusion.min.0 + (blur_fusion.min.1*blur_fusion.stride.1)) + (blur_fusion.min.2*blur_fusion.stride.2)))] = uint16((max(min(f2[(((blur_fusion.s0.x - f2.x.min_realized) + ((blur_fusion.s0.y - clamped.y.min_realized)*f2.x.extent_realized)) + ((blur_fusion.s0.c - blur_fusion.min.2)*(f2.x.extent_realized*f2.y.extent_realized)))], 1.000000f), 0.000000f)*65535.000000f))
        }
      }
    }
    assert((halide_dev_free(f2.buffer) == 0), "Failed to free device buffer for f2")
    free f2
    set_host_dirty(blur_fusion.buffer, uint8(1))
  }
  0
}


Constructing OpenCL device codegen
Target triple of initial module: x86_64-unknown-unknown-unknown
Target triple of initial module: x86_64--linux-gnu
Generating llvm bitcode...
OpenCL kernel:
/*OpenCL C*/
#pragma OPENCL FP_CONTRACT ON
float maxval_f32() {return FLT_MAX;}
float minval_f32() {return -FLT_MAX;}
float nan_f32() { return NAN; }
float neg_inf_f32() { return -INFINITY; }
bool is_nan_f32(float x) {return x != x; }
float inf_f32() { return INFINITY; }
float float_from_bits(unsigned int x) {return as_float(x);}
char smod_char(char a, char b) {
char r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

short smod_short(short a, short b) {
short r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

int smod_int(int a, int b) {
int r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

long smod_long(long a, long b) {
long r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

char sdiv_char(char a, char b) {
char q = a / b;
char r = a - q*b;
char bs = b >> (8*sizeof(char) - 1);
char rs = r >> (8*sizeof(char) - 1);
return q - (rs&bs) + (rs&~bs);
}

short sdiv_short(short a, short b) {
short q = a / b;
short r = a - q*b;
short bs = b >> (8*sizeof(short) - 1);
short rs = r >> (8*sizeof(short) - 1);
return q - (rs&bs) + (rs&~bs);
}

int sdiv_int(int a, int b) {
int q = a / b;
int r = a - q*b;
int bs = b >> (8*sizeof(int) - 1);
int rs = r >> (8*sizeof(int) - 1);
return q - (rs&bs) + (rs&~bs);
}

long sdiv_long(long a, long b) {
long q = a / b;
long r = a - q*b;
long bs = b >> (8*sizeof(long) - 1);
long rs = r >> (8*sizeof(long) - 1);
return q - (rs&bs) + (rs&~bs);
}

#define sqrt_f32 sqrt 
#define sin_f32 sin 
#define cos_f32 cos 
#define exp_f32 exp 
#define log_f32 log 
#define abs_f32 fabs 
#define floor_f32 floor 
#define ceil_f32 ceil 
#define round_f32 round 
#define trunc_f32 trunc 
#define pow_f32 pow
#define asin_f32 asin 
#define acos_f32 acos 
#define tan_f32 tan 
#define atan_f32 atan 
#define atan2_f32 atan2
#define sinh_f32 sinh 
#define asinh_f32 asinh 
#define cosh_f32 cosh 
#define acosh_f32 acosh 
#define tanh_f32 tanh 
#define atanh_f32 atanh 
#define fast_inverse_f32 native_recip 
#define fast_inverse_sqrt_f32 native_rsqrt 
int halide_gpu_thread_barrier() {
  barrier(CLK_LOCAL_MEM_FENCE);
  return 0;
}
#define __address_space___shared __local

__kernel void _at_least_one_kernel(int x) { }
// Address spaces for kernel_f2_s0_y_y___block_id_y
#define __address_space__clamped __global
#define __address_space__f2 __global
__kernel void kernel_f2_s0_y_y___block_id_y(
 const int _blur_fusion_extent_0,
 const int _blur_fusion_extent_1,
 const int _blur_fusion_min_0,
 const int _blur_fusion_min_1,
 const int _blur_fusion_min_2,
 const int _clamped_stride_2,
 const int _clamped_x_extent_realized_s_s,
 const int _clamped_x_min_realized,
 const int _clamped_y_min_realized,
 const int _f2_s0_c,
 const int _f2_x_extent_realized,
 const int _f2_x_min_realized,
 const int _f2_y_extent_realized,
 __address_space__clamped float *_clamped,
 __address_space__f2 float *_f2,
 __address_space___shared int16* __shared)
{
 int _f2_s0_y_y___block_id_y = get_group_id(1);
 int _0 = _f2_s0_y_y___block_id_y * 2;
 int _1 = _0 + _blur_fusion_min_1;
 int _2 = _blur_fusion_min_1 + _blur_fusion_extent_1;
 int _3 = _2 + -2;
 int _4 = min(_1, _3);
 int _f2_s0_x_x___block_id_x = get_group_id(0);
 int ___thread_id_y = get_local_id(1);
 int ___thread_id_x = get_local_id(0);
 int _5 = _f2_s0_x_x___block_id_x * 2;
 int _6 = _5 + _blur_fusion_min_0;
 int _7 = _blur_fusion_min_0 + _blur_fusion_extent_0;
 int _8 = _7 + -2;
 int _9 = min(_6, _8);
 int _10 = ___thread_id_y * 2;
 int _11 = _4 + _10;
 int _12 = ___thread_id_x * 2;
 int _13 = _9 + _12;
 {
  float _f0[12];
  #define __address_space__f0 __private
  // produce f0
  for (int _f0_s0_y = _11; _f0_s0_y < _11 + 2; _f0_s0_y++)
  {
   int _14 = _13 + -2;
   for (int _f0_s0_x = _14; _f0_s0_x < _14 + 6; _f0_s0_x++)
   {
    int _15 = _f0_s0_x - _clamped_x_min_realized;
    int _16 = _f0_s0_y - _clamped_y_min_realized;
    int _17 = _clamped_x_extent_realized_s_s - _clamped_x_min_realized;
    int _18 = _17 + 1;
    int _19 = _16 * _18;
    int _20 = _15 + _19;
    int _21 = _f2_s0_c - _blur_fusion_min_2;
    int _22 = _21 * _clamped_stride_2;
    int _23 = _20 + _22;
    int _24 = _23 + -1;
    float _25 = _clamped[_24];
    float _26 = _clamped[_23];
    float _27 = _25 + _26;
    int _28 = _23 + 1;
    float _29 = _clamped[_28];
    float _30 = _27 + _29;
    float _31 = _30 * float_from_bits(1051372203 /* 0.333333 */);
    int _32 = _f0_s0_x - _13;
    int _33 = _f0_s0_y - _11;
    int _34 = _33 * 6;
    int _35 = _32 + _34;
    int _36 = _35 + 2;
    _f0[_36] = _31;
   } // for _f0_s0_x
  } // for _f0_s0_y
  // consume f0
  {
   float _f1[8];
   #define __address_space__f1 __private
   // produce f1
   for (int _f1_s0_y = _11; _f1_s0_y < _11 + 2; _f1_s0_y++)
   {
    int _37 = _13 + -1;
    for (int _f1_s0_x = _37; _f1_s0_x < _37 + 4; _f1_s0_x++)
    {
     int _38 = _f1_s0_x - _13;
     int _39 = _f1_s0_y - _11;
     int _40 = _39 * 6;
     int _41 = _38 + _40;
     int _42 = _41 + 1;
     float _43 = _f0[_42];
     int _44 = _41 + 2;
     float _45 = _f0[_44];
     float _46 = _43 + _45;
     int _47 = _41 + 3;
     float _48 = _f0[_47];
     float _49 = _46 + _48;
     float _50 = _49 * float_from_bits(1051372203 /* 0.333333 */);
     int _51 = _39 * 4;
     int _52 = _38 + _51;
     int _53 = _52 + 1;
     _f1[_53] = _50;
    } // for _f1_s0_x
   } // for _f1_s0_y
   #undef __address_space__f0
   // consume f1
   for (int _f2_s0_y_yi = 0; _f2_s0_y_yi < 0 + 2; _f2_s0_y_yi++)
   {
    for (int _f2_s0_x_xi = 0; _f2_s0_x_xi < 0 + 2; _f2_s0_x_xi++)
    {
     int _54 = ___thread_id_x * 2;
     int _55 = _54 + _f2_s0_x_xi;
     int _56 = _9 + _55;
     int _57 = _56 - _13;
     int _58 = ___thread_id_y * 2;
     int _59 = _58 + _f2_s0_y_yi;
     int _60 = _4 + _59;
     int _61 = _60 - _11;
     int _62 = _61 * 4;
     int _63 = _57 + _62;
     float _64 = _f1[_63];
     int _65 = _63 + 1;
     float _66 = _f1[_65];
     float _67 = _64 + _66;
     int _68 = _63 + 2;
     float _69 = _f1[_68];
     float _70 = _67 + _69;
     float _71 = _70 * float_from_bits(1051372203 /* 0.333333 */);
     int _72 = _56 - _f2_x_min_realized;
     int _73 = _60 - _clamped_y_min_realized;
     int _74 = _73 * _f2_x_extent_realized;
     int _75 = _72 + _74;
     int _76 = _f2_s0_c - _blur_fusion_min_2;
     int _77 = _f2_x_extent_realized * _f2_y_extent_realized;
     int _78 = _76 * _77;
     int _79 = _75 + _78;
     _f2[_79] = _71;
    } // for _f2_s0_x_xi
   } // for _f2_s0_y_yi
   #undef __address_space__f1
  } // alloc _f1
 } // alloc _f0
} // kernel kernel_f2_s0_y_y___block_id_y
#undef __address_space__clamped
#undef __address_space__f2

Compiling to native code...
'+fma +f16c' is not a recognized feature for this target (ignoring feature)
'+fma +f16c' is not a recognized feature for this target (ignoring feature)
