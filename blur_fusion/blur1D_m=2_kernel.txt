g++ blur_fusion.cpp -g -I /home/sting47/Halide/include -L /home/sting47/Halide/bin -lHalide -o blur_fusion -lpthread -ldl -lz 
./blur_fusion
Injecting realization of blur[1]
Injecting realization of blur[0]
Injecting realization of clamped
Inlining floating
Injecting tracing...
Injecting profiling...
Adding checks for parameters
Computing bounds of each function's value
Adding checks for images
Performing computation bounds inference...
Performing sliding window optimization...
Performing allocation bounds inference...
Uniquifying variable names...
Performing storage folding optimization...
Injecting debug_to_file calls...
Simplifying...
Dynamically skipping stages...
Performing storage flattening...
Injecting host <-> dev buffer copies...
Injecting per-block gpu synchronization...
Removing code that depends on undef values...
Simplifying...
Unrolling...
Vectorizing...
Detecting vector interleavings...
Specializing clamped ramps...
Injecting early frees...
Injecting device frees...
Simplifying...
Lowering after final simplification:
let input.extent.0.required.s = (max(min(((blur_fusion.min.0 + blur_fusion.extent.0) + 1), (input.extent.0 + -1)), 0) - max(min((blur_fusion.min.0 + -2), (input.extent.0 + -1)), 0))
let input.min.0.required = max(min((blur_fusion.min.0 + -2), (input.extent.0 + -1)), 0)
let input.extent.1.required.s = (max((min((blur_fusion.min.1 + blur_fusion.extent.1), input.extent.1) + -1), 0) - max(min(blur_fusion.min.1, (input.extent.1 + -1)), 0))
let input.min.1.required = max(min(blur_fusion.min.1, (input.extent.1 + -1)), 0)
let input.stride.2.required = ((input.extent.0.required.s + 1)*(input.extent.1.required.s + 1))
if (blur_fusion.host_and_dev_are_null) {
  rewrite_buffer(blur_fusion.buffer, 2, blur_fusion.min.0, blur_fusion.extent.0, 1, blur_fusion.min.1, blur_fusion.extent.1, blur_fusion.extent.0, blur_fusion.min.2, blur_fusion.extent.2, (blur_fusion.extent.0*blur_fusion.extent.1))
}
if (input.host_and_dev_are_null) {
  rewrite_buffer(input.buffer, 2, input.min.0.required, (input.extent.0.required.s + 1), 1, input.min.1.required, (input.extent.1.required.s + 1), (input.extent.0.required.s + 1), blur_fusion.min.2, blur_fusion.extent.2, input.stride.2.required)
}
if (!(blur_fusion.host_and_dev_are_null || input.host_and_dev_are_null)) {
  assert((blur_fusion.elem_size == 2), stringify("Output buffer blur_fusion has type uint16, but elem_size of the buffer_t passed in is ", blur_fusion.elem_size, " instead of 2"))
  assert((input.elem_size == 2), stringify("Input buffer input has type uint16, but elem_size of the buffer_t passed in is ", input.elem_size, " instead of 2"))
  assert((input.min.0 <= input.min.0.required), stringify("Input buffer input is accessed at ", max(min((blur_fusion.min.0 + -2), (input.extent.0 + -1)), 0), ", which is before the min (", input.min.0, ") in dimension 0"))
  assert(((((input.min.0.required + input.extent.0.required.s) - input.extent.0) + 1) <= input.min.0), stringify("Input buffer input is accessed at ", (input.min.0.required + input.extent.0.required.s), ", which is beyond the max (", ((input.min.0 + input.extent.0) + -1), ") in dimension 0"))
  assert((input.min.1 <= input.min.1.required), stringify("Input buffer input is accessed at ", max(min(blur_fusion.min.1, (input.extent.1 + -1)), 0), ", which is before the min (", input.min.1, ") in dimension 1"))
  assert(((((input.min.1.required + input.extent.1.required.s) - input.extent.1) + 1) <= input.min.1), stringify("Input buffer input is accessed at ", (input.min.1.required + input.extent.1.required.s), ", which is beyond the max (", ((input.min.1 + input.extent.1) + -1), ") in dimension 1"))
  assert((input.min.2 <= blur_fusion.min.2), stringify("Input buffer input is accessed at ", blur_fusion.min.2, ", which is before the min (", input.min.2, ") in dimension 2"))
  assert((((blur_fusion.min.2 + blur_fusion.extent.2) - input.extent.2) <= input.min.2), stringify("Input buffer input is accessed at ", ((blur_fusion.min.2 + blur_fusion.extent.2) + -1), ", which is beyond the max (", ((input.min.2 + input.extent.2) + -1), ") in dimension 2"))
  assert((blur_fusion.stride.0 == 1), "Static constraint violated: blur_fusion.stride.0 == 1")
  assert((input.stride.0 == 1), "Static constraint violated: input.stride.0 == 1")
  let blur_fusion.total_extent.1 = (int64(blur_fusion.extent.1)*int64(blur_fusion.extent.0))
  let input.total_extent.1 = (int64(input.extent.1)*int64(input.extent.0))
  assert((int64(blur_fusion.extent.0) <= int64(2147483647)), "Total allocation for buffer blur_fusion exceeds 2^31 - 1")
  assert(((int64(blur_fusion.extent.1)*int64(blur_fusion.stride.1)) <= int64(2147483647)), "Total allocation for buffer blur_fusion exceeds 2^31 - 1")
  assert((blur_fusion.total_extent.1 <= int64(2147483647)), "Product of extents for buffer blur_fusion exceeds 2^31 - 1")
  assert(((int64(blur_fusion.extent.2)*int64(blur_fusion.stride.2)) <= int64(2147483647)), "Total allocation for buffer blur_fusion exceeds 2^31 - 1")
  assert(((int64(blur_fusion.extent.2)*blur_fusion.total_extent.1) <= int64(2147483647)), "Product of extents for buffer blur_fusion exceeds 2^31 - 1")
  assert((int64(input.extent.0) <= int64(2147483647)), "Total allocation for buffer input exceeds 2^31 - 1")
  assert(((int64(input.extent.1)*int64(input.stride.1)) <= int64(2147483647)), "Total allocation for buffer input exceeds 2^31 - 1")
  assert((input.total_extent.1 <= int64(2147483647)), "Product of extents for buffer input exceeds 2^31 - 1")
  assert(((int64(input.extent.2)*int64(input.stride.2)) <= int64(2147483647)), "Total allocation for buffer input exceeds 2^31 - 1")
  assert(((int64(input.extent.2)*input.total_extent.1) <= int64(2147483647)), "Product of extents for buffer input exceeds 2^31 - 1")
  allocate clamped[float32 * (blur_fusion.extent.0 + 4) * blur_fusion.extent.1 * blur_fusion.extent.2]
  let clamped.buffer = create_buffer_t(address_of(clamped[0]), 4, (blur_fusion.min.0 + -2), (blur_fusion.extent.0 + 4), 1, blur_fusion.min.1, blur_fusion.extent.1, (blur_fusion.extent.0 + 4), blur_fusion.min.2, blur_fusion.extent.2, ((blur_fusion.extent.0 + 4)*blur_fusion.extent.1))
  assert((halide_dev_malloc(clamped.buffer) == 0), "Failed to allocate device buffer for clamped")
  produce clamped {
    assert((halide_copy_to_host(input.buffer) == 0), "Failed to copy buffer input to host.")
    for (clamped.s0.c, blur_fusion.min.2, blur_fusion.extent.2) {
      for (clamped.s0.y, blur_fusion.min.1, blur_fusion.extent.1) {
        for (clamped.s0.x, (blur_fusion.min.0 + -2), (blur_fusion.extent.0 + 4)) {
          clamped[((((clamped.s0.x - blur_fusion.min.0) + ((clamped.s0.y - blur_fusion.min.1)*(blur_fusion.extent.0 + 4))) + ((clamped.s0.c - blur_fusion.min.2)*((blur_fusion.extent.0 + 4)*blur_fusion.extent.1))) + 2)] = (float32(input[(((max(min(clamped.s0.x, (input.extent.0 + -1)), 0) + (max(min(clamped.s0.y, (input.extent.1 + -1)), 0)*input.stride.1)) + (clamped.s0.c*input.stride.2)) - ((input.min.0 + (input.min.1*input.stride.1)) + (input.min.2*input.stride.2)))])*0.000015f)
        }
      }
    }
    set_host_dirty(clamped.buffer, uint8(1))
  }
  allocate blur[1][float32 * blur_fusion.extent.0 * blur_fusion.extent.1 * blur_fusion.extent.2]
  let blur[1].buffer = create_buffer_t(address_of(blur[1][0]), 4, blur_fusion.min.0, blur_fusion.extent.0, 1, blur_fusion.min.1, blur_fusion.extent.1, blur_fusion.extent.0, blur_fusion.min.2, blur_fusion.extent.2, (blur_fusion.extent.0*blur_fusion.extent.1))
  assert((halide_dev_malloc(blur[1].buffer) == 0), "Failed to allocate device buffer for blur[1]")
  produce blur[1] {
    assert((halide_copy_to_dev(clamped.buffer) == 0), "Failed to copy buffer clamped to dev.")
    parallel (blur[1].s0.c.__block_id_z, 0, blur_fusion.extent.2) {
      parallel (blur[1].s0.y.__block_id_y, 0, blur_fusion.extent.1) {
        parallel (blur[1].s0.x.__block_id_x, 0, blur_fusion.extent.0) {
          allocate __shared[uint8 * 12]
          parallel (.__thread_id_x, 0, 1) {
            produce blur[0] {
              for (blur[0].s0.x, ((blur[1].s0.x.__block_id_x + blur_fusion.min.0) + -1), 3) {
                __shared[((blur[0].s0.x - (blur[1].s0.x.__block_id_x + blur_fusion.min.0)) + 1)] = (let t0 = (((blur[0].s0.x - blur_fusion.min.0) + (blur[1].s0.y.__block_id_y*(blur_fusion.extent.0 + 4))) + (blur[1].s0.c.__block_id_z*((blur_fusion.extent.0 + 4)*blur_fusion.extent.1))) in (((clamped[(t0 + 1)] + clamped[(t0 + 2)]) + clamped[(t0 + 3)])*0.333333f))
              }
              halide_gpu_thread_barrier()
            }
            blur[1][((blur[1].s0.x.__block_id_x + (blur[1].s0.y.__block_id_y*blur_fusion.extent.0)) + (blur[1].s0.c.__block_id_z*(blur_fusion.extent.0*blur_fusion.extent.1)))] = (((__shared[0] + __shared[1]) + __shared[2])*0.333333f)
          }
          free __shared
        }
      }
    }
    assert((halide_dev_free(clamped.buffer) == 0), "Failed to free device buffer for clamped")
    free clamped
    set_dev_dirty(blur[1].buffer, uint8(1))
  }
  produce blur_fusion {
    assert((halide_copy_to_host(blur_fusion.buffer) == 0), "Failed to copy buffer blur_fusion to host.")
    assert((halide_copy_to_host(blur[1].buffer) == 0), "Failed to copy buffer blur[1] to host.")
    for (blur_fusion.s0.c, blur_fusion.min.2, blur_fusion.extent.2) {
      for (blur_fusion.s0.y, blur_fusion.min.1, blur_fusion.extent.1) {
        for (blur_fusion.s0.x, blur_fusion.min.0, blur_fusion.extent.0) {
          blur_fusion[(((blur_fusion.s0.x + (blur_fusion.s0.y*blur_fusion.stride.1)) + (blur_fusion.s0.c*blur_fusion.stride.2)) - ((blur_fusion.min.0 + (blur_fusion.min.1*blur_fusion.stride.1)) + (blur_fusion.min.2*blur_fusion.stride.2)))] = uint16((max(min(blur[1][(((blur_fusion.s0.x - blur_fusion.min.0) + ((blur_fusion.s0.y - blur_fusion.min.1)*blur_fusion.extent.0)) + ((blur_fusion.s0.c - blur_fusion.min.2)*(blur_fusion.extent.0*blur_fusion.extent.1)))], 1.000000f), 0.000000f)*65535.000000f))
        }
      }
    }
    assert((halide_dev_free(blur[1].buffer) == 0), "Failed to free device buffer for blur[1]")
    free blur[1]
    set_host_dirty(blur_fusion.buffer, uint8(1))
  }
  0
}


Constructing OpenCL device codegen
Target triple of initial module: x86_64-unknown-unknown-unknown
Target triple of initial module: x86_64--linux-gnu
Generating llvm bitcode...
OpenCL kernel:
/*OpenCL C*/
#pragma OPENCL FP_CONTRACT ON
float maxval_f32() {return FLT_MAX;}
float minval_f32() {return -FLT_MAX;}
float nan_f32() { return NAN; }
float neg_inf_f32() { return -INFINITY; }
bool is_nan_f32(float x) {return x != x; }
float inf_f32() { return INFINITY; }
float float_from_bits(unsigned int x) {return as_float(x);}
char smod_char(char a, char b) {
char r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

short smod_short(short a, short b) {
short r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

int smod_int(int a, int b) {
int r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

long smod_long(long a, long b) {
long r = a % b;
if (r < 0) { r += b < 0 ? -b : b; }
return r;
}

char sdiv_char(char a, char b) {
char q = a / b;
char r = a - q*b;
char bs = b >> (8*sizeof(char) - 1);
char rs = r >> (8*sizeof(char) - 1);
return q - (rs&bs) + (rs&~bs);
}

short sdiv_short(short a, short b) {
short q = a / b;
short r = a - q*b;
short bs = b >> (8*sizeof(short) - 1);
short rs = r >> (8*sizeof(short) - 1);
return q - (rs&bs) + (rs&~bs);
}

int sdiv_int(int a, int b) {
int q = a / b;
int r = a - q*b;
int bs = b >> (8*sizeof(int) - 1);
int rs = r >> (8*sizeof(int) - 1);
return q - (rs&bs) + (rs&~bs);
}

long sdiv_long(long a, long b) {
long q = a / b;
long r = a - q*b;
long bs = b >> (8*sizeof(long) - 1);
long rs = r >> (8*sizeof(long) - 1);
return q - (rs&bs) + (rs&~bs);
}

#define sqrt_f32 sqrt 
#define sin_f32 sin 
#define cos_f32 cos 
#define exp_f32 exp 
#define log_f32 log 
#define abs_f32 fabs 
#define floor_f32 floor 
#define ceil_f32 ceil 
#define round_f32 round 
#define trunc_f32 trunc 
#define pow_f32 pow
#define asin_f32 asin 
#define acos_f32 acos 
#define tan_f32 tan 
#define atan_f32 atan 
#define atan2_f32 atan2
#define sinh_f32 sinh 
#define asinh_f32 asinh 
#define cosh_f32 cosh 
#define acosh_f32 acosh 
#define tanh_f32 tanh 
#define atanh_f32 atanh 
#define fast_inverse_f32 native_recip 
#define fast_inverse_sqrt_f32 native_rsqrt 
int halide_gpu_thread_barrier() {
  barrier(CLK_LOCAL_MEM_FENCE);
  return 0;
}
#define __address_space___shared __local

__kernel void _at_least_one_kernel(int x) { }
// Address spaces for kernel_blur_1__s0_c___block_id_z
#define __address_space__blur___1___ __global
#define __address_space__clamped __global
__kernel void kernel_blur_1__s0_c___block_id_z(
 const int _blur_fusion_extent_0,
 const int _blur_fusion_extent_1,
 const int _blur_fusion_extent_2,
 const int _blur_fusion_min_0,
 __address_space__blur___1___ float *_blur___1___,
 __address_space__clamped float *_clamped,
 __address_space___shared int16* __shared)
{
 int _blur___1____s0_c___block_id_z = get_group_id(2);
 int _blur___1____s0_y___block_id_y = get_group_id(1);
 int _blur___1____s0_x___block_id_x = get_group_id(0);
 int ___thread_id_x = get_local_id(0);
 // produce blur[0]
 int _0 = _blur___1____s0_x___block_id_x + _blur_fusion_min_0;
 int _1 = _0 + -1;
 for (int _blur___0____s0_x = _1; _blur___0____s0_x < _1 + 3; _blur___0____s0_x++)
 {
  int _2 = _blur___0____s0_x - _blur_fusion_min_0;
  int _3 = _blur_fusion_extent_0 + 4;
  int _4 = _blur___1____s0_y___block_id_y * _3;
  int _5 = _2 + _4;
  int _6 = _3 * _blur_fusion_extent_1;
  int _7 = _blur___1____s0_c___block_id_z * _6;
  int _8 = _5 + _7;
  int _9 = _8 + 1;
  float _10 = _clamped[_9];
  int _11 = _8 + 2;
  float _12 = _clamped[_11];
  float _13 = _10 + _12;
  int _14 = _8 + 3;
  float _15 = _clamped[_14];
  float _16 = _13 + _15;
  float _17 = _16 * float_from_bits(1051372203 /* 0.333333 */);
  int _18 = _blur___1____s0_x___block_id_x + _blur_fusion_min_0;
  int _19 = _blur___0____s0_x - _18;
  int _20 = _19 + 1;
  ((__address_space___shared float *)__shared)[_20] = _17;
 } // for _blur___0____s0_x
 int _21 = halide_gpu_thread_barrier();
 (void)_21;
 // consume blur[0]
 float _22 = ((__address_space___shared float *)__shared)[0];
 float _23 = ((__address_space___shared float *)__shared)[1];
 float _24 = _22 + _23;
 float _25 = ((__address_space___shared float *)__shared)[2];
 float _26 = _24 + _25;
 float _27 = _26 * float_from_bits(1051372203 /* 0.333333 */);
 int _28 = _blur___1____s0_y___block_id_y * _blur_fusion_extent_0;
 int _29 = _blur___1____s0_x___block_id_x + _28;
 int _30 = _blur_fusion_extent_0 * _blur_fusion_extent_1;
 int _31 = _blur___1____s0_c___block_id_z * _30;
 int _32 = _29 + _31;
 _blur___1___[_32] = _27;
} // kernel kernel_blur_1__s0_c___block_id_z
#undef __address_space__blur___1___
#undef __address_space__clamped

Compiling to native code...
'+fma +f16c' is not a recognized feature for this target (ignoring feature)
'+fma +f16c' is not a recognized feature for this target (ignoring feature)
g++ -I/home/sting47/Halide/apps/support -Wall -O3 process.cpp blur_fusion.o -o process -lpthread -ldl -L/usr/lib/x86_64-linux-gnu -lpng12 -I/usr/include/libpng12  -lOpenCL 
process.cpp: In function ‘int main(int, char**)’:
process.cpp:20:13: warning: unused variable ‘t1’ [-Wunused-variable]
     timeval t1, t2;
             ^
process.cpp:20:17: warning: unused variable ‘t2’ [-Wunused-variable]
     timeval t1, t2;
                 ^
